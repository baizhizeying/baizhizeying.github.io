<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python语法</title>
    <url>/2023/11/05/python%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="python数据类型"><a href="#python数据类型" class="headerlink" title="python数据类型"></a>python数据类型</h3><p>string 字符串<br>int 整数<br>float 浮点数<br>bool 浮点数</p>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>dictionary 字典（键值对用{}表示）<br>list 列表（有序存储，下标读取用[]表示）<br>tuple 元组（类似于列表，<strong>区别在于不可改变</strong>）<br>queue 队列(先进先出)<br>stack 栈（后进后出）</p>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a,b,c):</span><br></pre></td></tr></table></figure>
<p>a表起始值<br>b表终止值<br>c表递增值<br><em>！注意</em><br>运行次数为 (b - a - 1) &#x2F; c<br><del>未完待续</del></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2023/11/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>动态规划算法通常用于求解具有某种最优性质的问题。</p>
<span id="more"></span>
<h2 id="1-什么是动态规划算法？"><a href="#1-什么是动态规划算法？" class="headerlink" title="1.什么是动态规划算法？"></a>1.什么是动态规划算法？</h2><p>动态规划算法与分治法类似，其基本思想也是将待求解问题分解为若干个字问题<br><strong>！注意：</strong><br>经分解得到的子问题不是互相独立的，有些子问题会被重复计算多次<br>因此：<br><em>保存子问题求解答案，在需要时调用，减少重复运算，用空间换时间的方法我们称之为动态规划算法</em></p>
<h2 id="2-使用动态规划算法求解的问题应有的基本要素"><a href="#2-使用动态规划算法求解的问题应有的基本要素" class="headerlink" title="2.使用动态规划算法求解的问题应有的基本要素"></a>2.使用动态规划算法求解的问题应有的基本要素</h2><p>1.重复子问题<br>求解问题时不总是都是新问题，而有子问题的复用<br>&#x3D;&#x3D;2.最优子结构（前提）&#x3D;&#x3D;<br>每个问题有最优解，所有问题的最优解加起来即是问题最优解<br>！注意：<br>最优解有只有仅一个</p>
<h2 id="3-讲了那么多，来道例题"><a href="#3-讲了那么多，来道例题" class="headerlink" title="3.讲了那么多，来道例题"></a>3.讲了那么多，来道例题</h2><pre><code>在花园里西瓜数为N*N(n &gt;= 0 and &lt;= 31)，问从西北角出发走到东南角（只能从右或下走），怎么才能让自己拿到的西瓜更多？
</code></pre>
<p><em>输入样例：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">7 8 9</span><br></pre></td></tr></table></figure>
<p>分析一下：<br>“从西北角出发” “到东南角”意味着只有一个最优解<br>那我们就可以在定义一个二维数组<code>result</code>用于存储子问题最优解<br>已知求数为最多，因此：我们可以将到东南角的求数，分解为一个个<br>小问题，也就是到每点所的最大求数，即可求解。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> result[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line"><span class="type">int</span> value[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; value[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i][j] = <span class="built_in">max</span>(result[i<span class="number">-1</span>][j],result[i][j<span class="number">-1</span>]) + value[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; reuslt[n][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c++算法</tag>
      </tags>
  </entry>
  <entry>
    <title>你好~</title>
    <url>/2023/11/04/%E4%BD%A0%E5%A5%BD/</url>
    <content><![CDATA[<p>欢迎来到我的博客</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎来到我的博客&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;欢迎来到我的博客&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎来到我的博客&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
</search>
